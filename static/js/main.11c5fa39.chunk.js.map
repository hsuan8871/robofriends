{"version":3,"sources":["Card.js","CardList.js","SearchBar.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBar","searchfield","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAkBeA,EAhBF,SAACC,GAAU,IACfC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GAEpB,OACE,yBAAKC,UAAU,uDAEf,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,eACrB,6BACI,4BAAKF,GACL,2BAAIC,MCYGK,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGXC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACrC,OAAS,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAMK,EAAOI,GAAGT,GAChBF,KAAMO,EAAOI,GAAGX,KAChBC,MAAQM,EAAOI,GAAGV,WAG9B,OACE,6BACGO,ICHQK,EAXG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC9B,OACE,yBAAKZ,UAAW,OAChB,2BAAOa,KAAK,SAASb,UAAY,oCAC1Bc,YAAc,gBACfC,SAAUH,MCELI,EARA,SAACpB,GACd,OACE,yBAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAQ,UAC9DxB,EAAMyB,WC6CEC,G,wDA3Cb,aAAc,IAAD,8BACX,gBAeFC,eAAiB,SAACC,GAChB,EAAKC,SAAU,CAACd,YAAaa,EAAME,OAAOC,SAf1C,EAAKC,MAAQ,CACXxB,OAAQ,GACRO,YAAa,IAJJ,E,gEAQK,IAAD,OACfkB,MAAM,8CACHC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAChCF,MAAK,SAAAG,GAAQ,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAS/B,IAAD,OAGAC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC9C,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAEnE,OAAiC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACb,wBAAIvC,UAAU,MAAd,cAIP,yBAAKA,UAAY,MACf,wBAAIA,UAAW,MAAf,cACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GApCVM,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.11c5fa39.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) =>{\n  const {name, email, id} = props;\n\n  return (\n    <div className='bg-light-green dib br2 pa2 ma2 grow bw2 shadow-5 tc'>\n\n    <img alt='robots' src={ `https://robohash.org/${id}?200x200 `}/>\n    <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n    </div>\n    </div>\n  );\n}\n\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\nimport {robots} from './robots';\n\nconst CardList = ({robots}) =>{\n\n\n  const cardComponent = robots.map((user,i) => {\n    return   <Card\n              key={i}\n              id = {robots[i].id}\n              name={robots[i].name}\n              email ={robots[i].email}\n              />\n  });\n  return(\n    <div>\n      {cardComponent}\n    </div>\n  );\n}\n\n\nexport default CardList;\n","import React from 'react';\n\n\nconst SearchBar = ({searchfield,SearchChange}) => {\n  return (\n    <div className= 'pa3'>\n    <input type='search' className = 'pa3 ma3 b--green bg-lightest-blue'\n           placeholder = 'search robots'\n          onChange={SearchChange}\n    />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nconst Scroll = (props) =>{\n  return (\n    <div style={{overflowY:'scroll',border:'1px solid black',height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport CardList from './CardList';\nimport SearchBar from './SearchBar';\nimport Scroll from './Scroll';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\ncomponentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>{return response.json();})\n      .then(users=>{this.setState({robots:users})});\n}\n\n\n\n  onSearchChange = (event) => {\n    this.setState( {searchfield: event.target.value} )\n  }\n\n  render(){\n\n\n    const filteredRobots = this.state.robots.filter(robots =>{\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n    if (this.state.robots.length === 0){\n      return <h1 className='tc'>Loading...</h1>\n    }\n\n    return(\n      <div className = 'tc'>\n        <h1 className= 'f1'>RoboFriend</h1>\n        <SearchBar SearchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import {robots} from './robots';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}